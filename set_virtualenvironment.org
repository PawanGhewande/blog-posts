#+DATE: [2014-03-04 Tue 13:17]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: blogs
#+TAGS: python, virtual environment
#+DESCRIPTION: An easy way set virtual environment for python
#+TITLE: Easy way to activate virtualenv
#+AUTHOR:    Sachin
#+EMAIL:     iclcoolster@gmail.com
#+DATE:      2014-03-04 Tue
#+KEYWORDS: python, virtualenv, activate, deactivate
#+LANGUAGE:  en
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:




I like to have a separate [[http://www.virtualenv.org/en/latest/][virtualenvs]] for each python project. This
end up having virtualenvs for each project that often find difficult
to switch. All my virtual environments resides in =~/virtualenvs=
directory but to activate/deactivate a virtual environment every time
is a tedious job. Luckily I have Bash function which I found very
handy. It lists all available virtual environments and can switch the
environment as needed.

/Update/: Sun May  4 09:43:34 IST 2014
I have updated the script so that tab-completion works. Please
download the updated version from download section

Usage: 

setv [TAB] [TAB]

will display all virtual environment names.

#+HTML: <!--more-->

Bash script(Old version, see /Downlaod/ section for latest version):
#+BEGIN_SRC sh
#!/usr/bin/env bash
# Set virtual environment

# Configure:
# Set the `VIRTUAL_DIR_PATH` variable value to valid PATH to your virtual envs
#
# Usage:
#
# Added this file to your .bashrc or any local rc
# $ source /path/to/virtual.sh
#
# Now you can 'activate' the virtual environment by typing
# $ setv <YOUR VIRTUAL ENVIRONMENT NAME>
#
# For example:
# $ setv rango
#
# To list all your virtual environments:
# $ setv -l
#
# To deactivate type:
# $ deactivate
#

# Path to your virtual environment directories
VIRTUAL_DIR_PATH="/home/sachin/virtualenvs/"

function setv_help() {
    # Echo help
    echo "Help: "
    echo -e "setv [-l] \t\t\t to list all virtual envs."
    echo -e "setv [virtual env name] \t to set virtual env."
}

function setv() {
    if [ $# -eq 0 ];
    then
	setv_help
    else
	if [ ${1} == "-l" ];
	then
	    echo -e "List of virtual environments you have under ${VIRTUAL_DIR_PATH}:\n"
	    LIST_OF_VIRTUALENVS=$(ls -1 ${VIRTUAL_DIR_PATH})
	    for virt in ${LIST_OF_VIRTUALENVS}
	    do
		echo ${virt}
	    done
	    # Check if the virtual directory exists in PATH
	elif [ -d ${VIRTUAL_DIR_PATH}${1} ];
	then
	    # Activate the virtual environment
	    source ${VIRTUAL_DIR_PATH}${1}/bin/activate
	else
	    # Else throw an error message
	    echo "Sorry, you don't have any virtual environment with that name"
	    setv_help
	fi
    fi
}
#+END_SRC sh

The usage is also mentioned as comments within a file.

** Usage:
   - Set the variable =VIRTUAL_DIR_PATH=
   - To list available virtual environments
     #+BEGIN_SRC sh
       setv -l
     #+END_SRC sh

     or

     #+BEGIN_SRC sh
       setv [TAB] [TAB]
     #+END_SRC sh

   - To switch environment
     #+BEGIN_SRC sh
       setv <VIRTUAL-ENVIRONMENT-NAME>
     #+END_SRC sh

     For example:
     #+BEGIN_SRC sh
       setv rango
     #+END_SRC sh

** Download
   - Above Bash script is available [[https://raw.github.com/psachin/bash_scripts/master/virtual.sh][here]]
