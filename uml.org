#+DATE: [2014-04-28 Mon 11:11]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: blogs
#+TAGS: uml, linux, kernel
#+DESCRIPTION: Compile and Boot UML kernel
#+TITLE: UML: User Mode Linux
#+AUTHOR:    Sachin
#+EMAIL:     iclcoolster@gmail.com
#+DATE:      2014-04-28 Mon
#+KEYWORDS: uml, linux, kernel, compile, user mode linux, ubuntu
#+LANGUAGE:  en
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

UML is a port of linux to linux as referred by Jeff Dike, the man
behind UML. It is a virtual machine which runs on linux and used to
debug new kernel builds and kernel modules. In this post, I will show
how to compile, and run UML 


#+HTML: <!--more-->


** Compile

  - Download latest kernel source from [[https://www.kernel.org/][kernel.org]], as of this
    writing, I'm using kernel version 3.14.2
    
    #+BEGIN_SRC sh
      wget -c https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.2.tar.xz
    #+END_SRC sh

    Un-compress and visit the directory

    #+BEGIN_SRC sh
      tar -xvJf linux-3.14.2.tar.xz
      cd linux-3.14.2
    #+END_SRC sh

  - Clean previous configs, blobs using

    #+BEGIN_SRC sh
      make mrproper; make mrproper ARCH=um; make clean
    #+END_SRC sh

  - Load default host config

    #+BEGIN_SRC sh
      make defconfig ARCH=um
    #+END_SRC sh

  - If you don't start with a defconfig, then the kernel build will be
    that of the host (it will find a config file in /boot), which will
    be very wrong for UML and will produce a UML that lacks vital
    drivers and won't boot.

    #+BEGIN_SRC sh
      make menuconfig ARCH=um  
    #+END_SRC sh

    Select host processor type and features

   #+CAPTION: Linux kernel menuconfig
   #+ATTR_HTML: alt="Linux kernel menuconfig"
   #+ATTR_HTML: width="950" height="290" style="border:4px solid gray;"
   #+ATTR_HTML: style="float:center;"
   [[./uml/uml-menuconfig.png]]

    Save and exit menuconfig window.

  - Finally, compile the kernel

    #+BEGIN_SRC sh
      make linux ARCH=um  
    #+END_SRC sh

  - The result will be 2 binaries, =vmlinuz= & =linux=

** Run 

  - Boot your newly compiled kernel using
    
    #+BEGIN_SRC sh
      ./linux
    #+END_SRC sh

  - This should die with a message something like

    #+BEGIN_SRC sh
      Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(98,0)
    #+END_SRC sh

    #+CAPTION: UML kernel panic
    #+ATTR_HTML: alt="UML kernel panic"
    #+ATTR_HTML: width="650" height="600" style="border:4px solid gray;"
    #+ATTR_HTML: style="float:center;"
    [[./uml/uml-kernel-panic.png]]


  - Boot with rootfs

    - Now that the kernel was unable to find roofs, you can download
      rootfs from [[http://fs.devloop.org.uk/]]

    - Add a parameter =ubda= followed by your rootfs
      path. Optionally, you may also add a =mem= parameter to specify
      amount of RAM your UML should use.

      #+BEGIN_SRC sh
        ./linux ubda=/path/to/rootFS mem=128M
      #+END_SRC sh

    #+CAPTION: UML: Boot with rootfs
    #+ATTR_HTML: alt="UML: Boot with rootfs "
    #+ATTR_HTML: width=590" height="330" style="border:4px solid gray;"
    #+ATTR_HTML: style="float:center;"
    [[./uml/uml-rootfs.png]]


    #+CAPTION: UML: login prompt
    #+ATTR_HTML: alt="UML: login prompt"
    #+ATTR_HTML: width="800" height="750" style="border:4px solid gray;"
    #+ATTR_HTML: style="float:center;"
    [[./uml/uml-login.png]]
    
      
